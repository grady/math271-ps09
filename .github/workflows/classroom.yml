name: GitHub Classroom Workflow

on: [push]

jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Read PACKAGES file
        id: packages
        run: |
            # Parse PACKAGE file requirements
            echo 'deps<<EOF' >> "$GITHUB_OUTPUT"
            grep -v ^# PACKAGES >> "$GITHUB_OUTPUT" || true
            echo 'EOF' >> "$GITHUB_OUTPUT"
      - name: Update r installation
        uses: grady/r-lib-actions/setup-r@v2-branch
      - name: Install dependencies from PACKAGES
        uses: grady/r-lib-actions/setup-r-dependencies@v2-branch
        with:
          dependencies: 'NA'
          packages: |
            dplyr
            jsonlite
            testthat
            rmarkdown
            stringr
            ${{ steps.packages.outputs.deps }}
      - name: Execute tests.R
        run: |
            # Execute tests.R
            cat("::group::Running tests\n")
            test_results <- as.data.frame(testthat::test_file("tests.R"))
            cat("::endgroup::\n")
            cat("::group::Writing autograding.json\n")
            fp <- file.path(".github", "classroom", "autograding.json")
            dir.create(dirname(fp))
            format_result <- function(res){
              trimws(paste(lapply(res, format), collapse="\n\n"))
            }
            output_df <- dplyr::transmute(
              test_results, name=test, run=tolower(!failed),
              points=as.integer(stringr::str_extract(test, "^<(\\d+)>", group=1)),
              setup=paste0("echo -n '", sapply(result, format_result), "'"))
            write(jsonlite::toJSON(list(tests=output_df)), fp)
            cat("::endgroup::\n")
            cat("::group::Show generated autograding.json\n")
            writeLines(jsonlite::prettify(paste(readLines(fp), collapse="\n")))
            cat("::endgroup::\n")
        shell: Rscript {0}
      - name: Github Classroom autograder
        uses: education/autograding@v1